# -*- coding: utf-8 -*-
"""Minor_Project_Submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uLas-p7DTGMiVNbFpZz74F0j8_iPE0ND
"""

from sklearn.datasets import load_iris
iris_data = load_iris()
print('Success Importing Dataset')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
import mglearn
print('Success')

print('Keys of Datasets:\n{}'.format(iris_data.keys()))

print(iris_data['DESCR'])

print('Target_Names:\n{}'.format(iris_data['target_names']))

print('Features_Names:\n{}'.format(iris_data['feature_names']))

df = iris_data['data']

df.shape

print('Review:\n{}'.format(df[:10]))

print('Type_Target:\n{}'.format(type(iris_data['target'])))

print('Target:\n{}'.format(iris_data['target']))

#df2 = pd.merge(iris_data['data'] , iris_data['target'])

from sklearn.model_selection import train_test_split
X_train , X_test , y_train , y_test = train_test_split(iris_data['data'] , iris_data['target'] , random_state = 0)

print('X test shape', format(X_test.shape))
print('y  test shape', format(y_test.shape))
print('X train shape', format(X_train.shape))
print('y train shape', format(y_train.shape))

iris_df = pd.DataFrame(iris_data['data'], columns=iris_data['feature_names'])

iris_df['species'] = iris_data['target']

iris_df_ = pd.DataFrame(X_train , columns= iris_data.feature_names)
pd.plotting.scatter_matrix(iris_df_, c=y_train, figsize=(15, 15), marker='o', hist_kwds={'bins':20}, s=60, alpha=.8, cmap=mglearn.cm3)

knn = KNeighborsClassifier(n_neighbors= 1)

knn.fit(X_train , y_train)

X_new = np.array([[5 ,2.6 ,7, 2]])
print('X_new shape is: {}'.format(X_new.shape))

prediction = knn.predict(X_new)
print('Success')

print('prediction : {}'.format(prediction))
print('Predicted Target Name: {}'.format(iris_data['target_names'][prediction]))

y_pred = knn.predict(X_test)
print(y_pred)

print('Test Accuracy Percentage:   {:3f}'.format(np.mean(y_pred == y_test)*100))

